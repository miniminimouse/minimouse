import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def lgd_datastaging(orig_data, stage1_vars, stage2_vars, lgd_var, 
                   id_var='LOAN_NUMBER', date_var='def_date'):
    """
    Python implementation of SAS lgd_datastaging macro
    Creates properly staged data for two-stage LGD modeling
    """
    results = {}
    
    # Stage 1 dataset
    stage1_keep_vars = stage1_vars + [lgd_var, id_var, date_var]
    lgd_stage1 = orig_data[stage1_keep_vars].copy()
    lgd_stage1['wt'] = 1
    results['lgd_stage1'] = lgd_stage1
    
    # Stage 2 dataset  
    stage2_keep_vars = stage2_vars + [lgd_var, id_var, date_var]
    lgd_stage2 = orig_data[stage2_keep_vars].copy()
    lgd_stage2['wt'] = 1
    results['lgd_stage2'] = lgd_stage2
    
    # Combined dataset with all variables
    all_vars = list(set(stage1_vars + stage2_vars + [lgd_var, id_var, date_var]))
    lgd_stage_all = orig_data[all_vars].copy()
    lgd_stage_all['wt'] = 1
    results['lgd_stage_all'] = lgd_stage_all
    
    # Adding staging flags to stage1 dataset
    lgd_stage1_wf = lgd_stage1.copy()
    lgd_stage1_wf['lgd_0'] = (lgd_stage1_wf[lgd_var] == 0).astype(int)
    lgd_stage1_wf['lgd_1'] = (lgd_stage1_wf[lgd_var] == 1).astype(int)
    lgd_stage1_wf['lgd_0_1'] = ((lgd_stage1_wf[lgd_var] > 0) & 
                                (lgd_stage1_wf[lgd_var] < 1)).astype(int)
    lgd_stage1_wf['lgd_0_1_inc'] = ((lgd_stage1_wf[lgd_var] > 0) & 
                                    (lgd_stage1_wf[lgd_var] <= 1)).astype(int)
    results['lgd_stage1_wf'] = lgd_stage1_wf
    
    # Adding staging flags to stage2 dataset
    lgd_stage2_wf = lgd_stage2.copy()
    lgd_stage2_wf['lgd_0'] = (lgd_stage2_wf[lgd_var] == 0).astype(int)
    lgd_stage2_wf['lgd_1'] = (lgd_stage2_wf[lgd_var] == 1).astype(int)
    lgd_stage2_wf['lgd_0_1'] = ((lgd_stage2_wf[lgd_var] > 0) & 
                                (lgd_stage2_wf[lgd_var] < 1)).astype(int)
    lgd_stage2_wf['lgd_0_1_inc'] = ((lgd_stage2_wf[lgd_var] > 0) & 
                                    (lgd_stage2_wf[lgd_var] <= 1)).astype(int)
    results['lgd_stage2_wf'] = lgd_stage2_wf
    
    # Adding staging flags to combined dataset
    lgd_stage_all_wf = lgd_stage_all.copy()
    lgd_stage_all_wf['lgd_0'] = (lgd_stage_all_wf[lgd_var] == 0).astype(int)
    lgd_stage_all_wf['lgd_1'] = (lgd_stage_all_wf[lgd_var] == 1).astype(int)
    lgd_stage_all_wf['lgd_0_1'] = ((lgd_stage_all_wf[lgd_var] > 0) & 
                                   (lgd_stage_all_wf[lgd_var] < 1)).astype(int)
    lgd_stage_all_wf['lgd_0_1_inc'] = ((lgd_stage_all_wf[lgd_var] > 0) & 
                                       (lgd_stage_all_wf[lgd_var] <= 1)).astype(int)
    results['lgd_stage_all_wf'] = lgd_stage_all_wf
    
    # Stage 1 y creation
    lgd_stage1_wf_wadj = lgd_stage1_wf.copy()
    
    # Create LGD_Stage1: 1 if lgd_var = 0, 2 if lgd_var > 0 (to match SAS)
    lgd_stage1_wf_wadj['LGD_Stage1'] = np.where(
        lgd_stage1_wf_wadj[lgd_var] == 0, 1, 2
    )
    
    # Create binary version for modeling: 1 if LGD_Stage1=2 (lgd_var>0), 0 if LGD_Stage1=1 (lgd_var=0)
    # This matches SAS ref='1' where the model predicts P(LGD_Stage1=2) = P(loss)
    lgd_stage1_wf_wadj['lgd_stage1'] = (lgd_stage1_wf_wadj['LGD_Stage1'] == 2).astype(int)
    
    results['lgd_stage1_wf_wadj'] = lgd_stage1_wf_wadj
    
    # Stage 2 algd_adj creation
    # Filter to only include cases where 0 < lgd_var <= 1
    mask = (lgd_stage2_wf[lgd_var] > 0) & (lgd_stage2_wf[lgd_var] <= 1)
    lgd_stage2_filtered = lgd_stage2_wf[mask].copy()
    
    # Create condition "a" rows: algd_adj=1, wt=lgd_var
    condition_a = lgd_stage2_filtered.copy()
    condition_a['algd_adj'] = 1
    condition_a['wt'] = condition_a[lgd_var]
    
    # Create condition "b" rows: algd_adj=0, wt=1-lgd_var
    condition_b = lgd_stage2_filtered.copy()
    condition_b['algd_adj'] = 0
    condition_b['wt'] = 1 - condition_b[lgd_var]
    
    # Combine both conditions
    lgd_stage2_wf_wadj = pd.concat([condition_a, condition_b], ignore_index=True)
    
    results['lgd_stage2_wf_wadj'] = lgd_stage2_wf_wadj
    
    return results

def performance_metrics(data, actual_var, pred_var, date_var=None):
    """Calculate performance metrics (MAE, RMSE) and return aggregated data for plotting"""
    mae = mean_absolute_error(data[actual_var], data[pred_var])
    rmse = np.sqrt(mean_squared_error(data[actual_var], data[pred_var]))
    
    results = {
        'mae': mae,
        'rmse': rmse,
        'aggregated_data': None
    }
    
    if date_var and date_var in data.columns:
        agg_data = data.groupby(date_var).agg({
            actual_var: 'mean',
            pred_var: 'mean'
        }).reset_index()
        
        agg_data.columns = [date_var, actual_var, pred_var]
        agg_data['Type'] = 'HIST'
        results['aggregated_data'] = agg_data
    
    return results

def create_performance_plot(hist_data, oot_data, actual_var, pred_var, date_var, 
                          model_name, reference_date=None):
    """Create performance plot similar to SAS SGPLOT"""
    plot_data = []
    
    if hist_data is not None:
        hist_actual = hist_data[[date_var, actual_var]].copy()
        hist_actual['series_name'] = f'Actual_{model_name}_HIST'
        hist_actual['value'] = hist_actual[actual_var]
        
        hist_pred = hist_data[[date_var, pred_var]].copy()
        hist_pred['series_name'] = f'Predicted_{model_name}_HIST'
        hist_pred['value'] = hist_pred[pred_var]
        
        plot_data.extend([hist_actual, hist_pred])
    
    if oot_data is not None:
        oot_actual = oot_data[[date_var, actual_var]].copy()
        oot_actual['series_name'] = f'Actual_{model_name}_OOT'
        oot_actual['value'] = oot_actual[actual_var]
        
        oot_pred = oot_data[[date_var, pred_var]].copy()
        oot_pred['series_name'] = f'Predicted_{model_name}_OOT'
        oot_pred['value'] = oot_pred[pred_var]
        
        plot_data.extend([oot_actual, oot_pred])
    
    if plot_data:
        combined_data = pd.concat(plot_data, ignore_index=True)
        
        plt.figure(figsize=(12, 8))
        
        for series in combined_data['series_name'].unique():
            series_data = combined_data[combined_data['series_name'] == series]
            
            if 'HIST' in series:
                linestyle = '-'
                alpha = 0.8
            else:
                linestyle = '--'
                alpha = 0.8
                
            if 'Actual' in series:
                color = 'blue' if 'HIST' in series else 'darkblue'
                marker = 'o'
            else:
                color = 'red' if 'HIST' in series else 'darkred' 
                marker = 's'
            
            plt.plot(pd.to_datetime(series_data[date_var]), series_data['value'], 
                    label=series, linewidth=2, linestyle=linestyle, 
                    color=color, marker=marker, markersize=4, alpha=alpha)
        
        if reference_date:
            plt.axvline(pd.to_datetime(reference_date), color='black', 
                       linestyle='--', linewidth=2, alpha=0.7, label='Reference Date')
        
        plt.xlabel('Default Date', fontsize=10)
        plt.ylabel('LGD Level', fontsize=10)
        plt.title(f'{model_name} Model - Train vs OOT Performance', fontsize=14)
        plt.ylim(0, 1)
        plt.legend(loc='upper right', bbox_to_anchor=(1, 1))
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.show()

def twostage_lgd(stage1_data, stage2_data, score_hist, score_oot, 
                id_var='loan_number', date_var='def_date', lgd_var='lgd_36m',
                stage1_vars=None, stage2_vars=None, outprefix='tg_', 
                reference_date=None, create_plots=True):
    """
    Python implementation of SAS two-stage LGD modeling macro
    Uses statsmodels to match SAS exactly
    """
    results = {}
    
    # Stage 1: Probability of Loss Model
    print("=" * 60)
    print("STAGE 1 MODEL - PROBABILITY OF LOSS")
    print("=" * 60)
    
    stage1_y = stage1_data['lgd_stage1']
    stage1_X = stage1_data[stage1_vars]
    stage1_X_const = sm.add_constant(stage1_X)
    
    stage1_model = sm.Logit(stage1_y, stage1_X_const).fit(disp=0)
    print(stage1_model.summary())
    results['stage1_model'] = stage1_model
    
    # Stage 2: E(LGD | Loss) Model  
    print("\n" + "=" * 60)
    print("STAGE 2 MODEL - E(LGD | LOSS)")
    print("=" * 60)
    
    stage2_y = stage2_data['algd_adj']
    stage2_X = stage2_data[stage2_vars]
    stage2_X_const = sm.add_constant(stage2_X)
    sample_weights = stage2_data['wt']
    
    stage2_model = sm.Logit(stage2_y, stage2_X_const, freq_weights=sample_weights).fit(disp=0)
    print(stage2_model.summary())
    results['stage2_model'] = stage2_model
    
    # Score Historical Data
    print("\n" + "=" * 60)
    print("SCORING AND PERFORMANCE METRICS")
    print("=" * 60)
    
    hist_stage1_X_const = sm.add_constant(score_hist[stage1_vars])
    hist_stage1_probs = stage1_model.predict(hist_stage1_X_const)
    
    hist_stage2_X_const = sm.add_constant(score_hist[stage2_vars])
    hist_stage2_probs = stage2_model.predict(hist_stage2_X_const)
    
    scored_hist = score_hist.copy()
    scored_hist['p_loss'] = hist_stage1_probs
    scored_hist['p_lgd'] = hist_stage2_probs
    scored_hist['pred_lgd'] = hist_stage1_probs * hist_stage2_probs
    
    if 'lgd_stage1' not in scored_hist.columns:
        scored_hist['lgd_stage1'] = (scored_hist[lgd_var] > 0).astype(int)
    if 'algd_adj' not in scored_hist.columns:
        scored_hist['algd_adj'] = (scored_hist[lgd_var] > 0).astype(int)
    
    # Score OOT Data
    oot_stage1_X_const = sm.add_constant(score_oot[stage1_vars])
    oot_stage1_probs = stage1_model.predict(oot_stage1_X_const)
    
    oot_stage2_X_const = sm.add_constant(score_oot[stage2_vars])
    oot_stage2_probs = stage2_model.predict(oot_stage2_X_const)
    
    scored_oot = score_oot.copy()
    scored_oot['p_loss'] = oot_stage1_probs
    scored_oot['p_lgd'] = oot_stage2_probs
    scored_oot['pred_lgd'] = oot_stage1_probs * oot_stage2_probs
    
    if 'lgd_stage1' not in scored_oot.columns:
        scored_oot['lgd_stage1'] = (scored_oot[lgd_var] > 0).astype(int)
    if 'algd_adj' not in scored_oot.columns:
        scored_oot['algd_adj'] = (scored_oot[lgd_var] > 0).astype(int)
    
    # Performance Metrics
    metrics = {}
    
    stage1_hist_metrics = performance_metrics(scored_hist, 'lgd_stage1', 'p_loss', date_var)
    metrics['stage1_hist'] = stage1_hist_metrics
    print(f"Stage-1 HIST - MAE: {stage1_hist_metrics['mae']:.6f}, RMSE: {stage1_hist_metrics['rmse']:.6f}")
    
    stage2_hist_metrics = performance_metrics(scored_hist, lgd_var, 'p_lgd', date_var)
    metrics['stage2_hist'] = stage2_hist_metrics
    print(f"Stage-2 HIST - MAE: {stage2_hist_metrics['mae']:.6f}, RMSE: {stage2_hist_metrics['rmse']:.6f}")
    
    combined_hist_metrics = performance_metrics(scored_hist, lgd_var, 'pred_lgd', date_var)
    metrics['combined_hist'] = combined_hist_metrics
    print(f"Combined HIST - MAE: {combined_hist_metrics['mae']:.6f}, RMSE: {combined_hist_metrics['rmse']:.6f}")
    
    stage1_oot_metrics = performance_metrics(scored_oot, 'lgd_stage1', 'p_loss', date_var)
    metrics['stage1_oot'] = stage1_oot_metrics
    print(f"Stage-1 OOT - MAE: {stage1_oot_metrics['mae']:.6f}, RMSE: {stage1_oot_metrics['rmse']:.6f}")
    
    stage2_oot_metrics = performance_metrics(scored_oot, lgd_var, 'p_lgd', date_var)
    metrics['stage2_oot'] = stage2_oot_metrics
    print(f"Stage-2 OOT - MAE: {stage2_oot_metrics['mae']:.6f}, RMSE: {stage2_oot_metrics['rmse']:.6f}")
    
    combined_oot_metrics = performance_metrics(scored_oot, lgd_var, 'pred_lgd', date_var)
    metrics['combined_oot'] = combined_oot_metrics
    print(f"Combined OOT - MAE: {combined_oot_metrics['mae']:.6f}, RMSE: {combined_oot_metrics['rmse']:.6f}")
    
    results['metrics'] = metrics
    
    # Create Performance Plots
    if create_plots:
        print("\nCreating Performance Plots...")
        
        create_performance_plot(
            stage1_hist_metrics['aggregated_data'],
            stage1_oot_metrics['aggregated_data'], 
            'lgd_stage1', 'p_loss', date_var,
            'Stage-1', reference_date
        )
        
        create_performance_plot(
            stage2_hist_metrics['aggregated_data'],
            stage2_oot_metrics['aggregated_data'],
            lgd_var, 'p_lgd', date_var, 
            'Stage-2', reference_date
        )
        
        create_performance_plot(
            combined_hist_metrics['aggregated_data'],
            combined_oot_metrics['aggregated_data'],
            lgd_var, 'pred_lgd', date_var,
            'Combined', reference_date
        )
    
    print("\nTwo-Stage LGD Modeling Complete!")
    return results
