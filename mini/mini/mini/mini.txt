import pandas as pd
import numpy as np
from scipy.stats import chi2   # chi-square cdf for p-values
from numpy.linalg import inv

def variable_significance(dev_model_results, oot_model_results, model_name):
    """
    assesses variable significance and coefficient drift between
    development and oot samples using wald chi-square tests
    """
    # --- pull models ---------------------------------------------------------
    dev = dev_model_results[model_name]
    oot = oot_model_results[model_name]
    
    # coefficients and ses
    beta_d, se_d = dev.params, dev.bse
    beta_o, se_o = oot.params, oot.bse
    
    # names â€“ fall back if attribute missing
    try:
        names = dev.param_names
    except AttributeError:
        names = getattr(beta_d, 'index', pd.Index([f'param_{i}' for i in range(len(beta_d))]))
    
    # dataframe with per-sample wald stats & p-values -------------------------
    df = pd.DataFrame({'param': names,
                       'beta_dev': beta_d,
                       'se_dev'  : se_d,
                       'beta_oot': beta_o,
                       'se_oot'  : se_o})
    
    df['wald_dev'] = (df['beta_dev'] / df['se_dev']) ** 2
    df['p_dev']    = 1 - chi2.cdf(df['wald_dev'], 1)
    
    df['wald_oot'] = (df['beta_oot'] / df['se_oot']) ** 2
    df['p_oot']    = 1 - chi2.cdf(df['wald_oot'], 1)
    
    # --- joint drift test ----------------------------------------------------
    # difference vector and summed covariance matrix
    delta = df['beta_dev'] - df['beta_oot']
    
    # try full cov matrices; if not available, use diagonal from bse^2
    try:
        cov_d = dev.cov_params()
    except AttributeError:
        cov_d = np.diag(se_d**2)
    try:
        cov_o = oot.cov_params()
    except AttributeError:
        cov_o = np.diag(se_o**2)
    
    var_diff = cov_d + cov_o
    wald_joint = float(delta.T @ inv(var_diff) @ delta)
    p_joint    = 1 - chi2.cdf(wald_joint, len(delta))
    
    # --- traffic-light logic --------------------------------------------------
    worst_p_dev = df['p_dev'].max()
    worst_p_oot = df['p_oot'].max()
    
    if (worst_p_dev < 0.04) and (worst_p_oot < 0.04) and (p_joint >= 0.05):
        color, status = 'ðŸŸ¢', 'all variables significant; no drift'
    elif (worst_p_dev < 0.05) and (worst_p_oot < 0.05) and (p_joint >= 0.04):
        color, status = 'ðŸŸ¡', 'borderline'
    else:
        color, status = 'ðŸ”´', 'insufficient significance or drift detected'
    
    # top five weakest variables (highest max-p across samples)
    df['p_max'] = df[['p_dev', 'p_oot']].max(axis=1)
    offenders = df.nlargest(5, 'p_max')[['param', 'p_dev', 'p_oot', 'p_max']]
    
    # optional console summary
    print('\n=== variable significance & drift summary ===')
    print(f'model: {model_name}')
    print(f'worst p dev : {worst_p_dev:.4g}')
    print(f'worst p oot : {worst_p_oot:.4g}')
    print(f'joint drift p: {p_joint:.4g}')
    print(f'status      : {color}  {status}')
    print('\nhighest p-values:')
    print(offenders.round(4).to_string(index=False))
    
    # return structured results
    return {
        'worst_p_dev'      : worst_p_dev,
        'worst_p_oot'      : worst_p_oot,
        'joint_drift_p'    : p_joint,
        'color'            : color,
        'status'           : status,
        'details'          : df,
        'top_offenders'    : offenders,
        'model_name'       : model_name
    }

# example call:
# vs_res = variable_significance(dev_model_results, oot_model_results, 'stage1_model')