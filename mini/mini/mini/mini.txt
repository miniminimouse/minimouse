def coef_stability(dev_model_results, oot_model_results, model_name):
    """
    calculate coefficient stability between development and oot model results
    
    dev_model_results: dict containing development model objects
    oot_model_results: dict containing oot model objects  
    model_name: key to access specific model (e.g., 'stage1_model')
    
    returns: dict with stability score, color code, and intermediate calculations
    """
    
    # extract the specific model objects
    dev_model = dev_model_results[model_name]
    oot_model = oot_model_results[model_name]
    
    # extract coefficients and standard errors from model objects
    dev_coef = dev_model.coef
    dev_stderr = dev_model.stderr
    oot_coef = oot_model.coef
    oot_stderr = oot_model.stderr
    
    # get parameter names (assuming they have .param_names or similar)
    # adjust this based on your actual model object structure
    try:
        param_names = dev_model.param_names
    except AttributeError:
        # fallback if no param_names attribute
        param_names = [f'param_{i}' for i in range(len(dev_coef))]
    
    # create dataframe for calculations
    calculations = pd.DataFrame({
        'parameter': param_names,
        'estimate_dev': dev_coef,
        'std_error_dev': dev_stderr,
        'estimate_oot': oot_coef,
        'std_error_oot': oot_stderr
    })
    
    print(f"Analyzing {len(calculations)} parameters for model: {model_name}")
    
    # step 1: calculate wald chi-square for development model
    # wald = (estimate / std_error)^2
    calculations['wald_chi_square_dev'] = (calculations['estimate_dev'] / calculations['std_error_dev']) ** 2
    
    # step 2: calculate standard differences for each parameter
    # std_diff = abs(dev_estimate - oot_estimate) / dev_std_error
    calculations['standard_difference'] = abs(calculations['estimate_dev'] - calculations['estimate_oot']) / calculations['std_error_dev']
    
    # step 3: calculate dot product (element-wise multiplication then sum)
    # dot_product = sum(wald_chi_square_dev * standard_difference)
    calculations['wald_x_std_diff'] = calculations['wald_chi_square_dev'] * calculations['standard_difference']
    dot_product = calculations['wald_x_std_diff'].sum()
    
    # step 4: calculate sum of wald chi-squares for development model
    sum_wald_chi_square = calculations['wald_chi_square_dev'].sum()
    
    # step 5: calculate coefficient stability
    coef_stab = dot_product / sum_wald_chi_square
    
    # determine color coding
    if coef_stab < 1:
        color = "ðŸŸ¢ GREEN"
        status = "Stable"
    elif 1 <= coef_stab < 2:
        color = "ðŸŸ¡ YELLOW" 
        status = "Moderate"
    else:
        color = "ðŸ”´ RED"
        status = "Unstable"
    
    print(f"\n=== Coefficient Stability Results for {model_name} ===")
    print(f"Coefficient Stability Score: {coef_stab:.4f}")
    print(f"Status: {color} ({status})")
    print(f"Dot Product: {dot_product:.4f}")
    print(f"Sum of Wald Chi-Squares: {sum_wald_chi_square:.4f}")
    
    # show top contributors to instability
    calculations['stability_contribution'] = (calculations['wald_x_std_diff'] / dot_product) * 100
    top_unstable = calculations.nlargest(5, 'stability_contribution')[['parameter', 'standard_difference', 'stability_contribution']]
    
    print(f"\nTop 5 parameters contributing to instability:")
    print(top_unstable.round(3))
    
    # return all intermediate results
    results = {
        'coefficient_stability': coef_stab,
        'color_code': color,
        'status': status,
        'dot_product': dot_product,
        'sum_wald_chi_square': sum_wald_chi_square,
        'detailed_calculations': calculations,
        'top_unstable_params': top_unstable,
        'model_name': model_name
    }
    
    return results

# example usage:
# stability_results = coef_stability(dev_model_results, oot_model_results, 'stage1_model')