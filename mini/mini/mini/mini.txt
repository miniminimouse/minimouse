def variable_significance(dev_model_results, oot_model_results, model_name):
    """
    calculate variable significance using wald chi-square tests
    
    dev_model_results: dict containing development model objects
    oot_model_results: dict containing oot model objects  
    model_name: key to access specific model (e.g., 'stage1_model')
    
    returns: dict with significance results, color code, and intermediate calculations
    """
    
    # extract the specific model objects
    dev_model = dev_model_results[model_name]
    oot_model = oot_model_results[model_name]
    
    # extract coefficients and standard errors from model objects
    dev_params = dev_model.params
    dev_bse = dev_model.bse
    oot_params = oot_model.params
    oot_bse = oot_model.bse
    
    # get parameter names
    param_names = dev_params.index.tolist()
    
    # create dataframe for calculations
    calculations = pd.DataFrame({
        'parameter': param_names,
        'estimate_dev': dev_params.values,
        'std_error_dev': dev_bse.values,
        'estimate_oot': oot_params.values,
        'std_error_oot': oot_bse.values
    })
    
    print(f"Analyzing {len(calculations)} parameters for model: {model_name}")
    
    # step 1: calculate wald chi-square for development model
    # wald = (estimate / std_error)^2
    calculations['wald_chi_square_dev'] = (calculations['estimate_dev'] / calculations['std_error_dev']) ** 2
    
    # step 2: calculate p-values from wald chi-square (1 degree of freedom)
    calculations['p_value_dev'] = 1 - stats.chi2.cdf(calculations['wald_chi_square_dev'], df=1)
    
    # step 3: determine significance status for each parameter
    def get_significance_status(p_val):
        if p_val < 0.04:
            return "ðŸŸ¢ GREEN", "Significant"
        elif 0.04 <= p_val < 0.05:
            return "ðŸŸ¡ YELLOW", "Marginal"
        else:
            return "ðŸ”´ RED", "Not Significant"
    
    calculations[['color_code', 'significance_status']] = calculations['p_value_dev'].apply(
        lambda x: pd.Series(get_significance_status(x))
    )
    
    # step 4: calculate overall significance metric using MAXIMUM p-value
    max_p_value = calculations['p_value_dev'].max()  # worst performing variable
    significant_count = (calculations['p_value_dev'] < 0.05).sum()
    total_params = len(calculations)
    significant_pct = (significant_count / total_params) * 100
    
    # overall status based on maximum p-value (conservative approach)
    overall_color, overall_status = get_significance_status(max_p_value)
    
    print(f"\n=== Variable Significance Results for {model_name} ===")
    print(f"Maximum P-value (worst variable): {max_p_value:.6f}")
    print(f"Overall Status: {overall_color} ({overall_status})")
    print(f"Significant Variables: {significant_count}/{total_params} ({significant_pct:.1f}%)")
    
    # show significance breakdown
    significance_summary = calculations.groupby('significance_status')['parameter'].count()
    print(f"\nSignificance Breakdown:")
    for status, count in significance_summary.items():
        print(f"  {status}: {count} variables")
    
    # show the actual worst performing variables
    worst_variables = calculations.nlargest(5, 'p_value_dev')[['parameter', 'wald_chi_square_dev', 'p_value_dev', 'significance_status']]
    
    print(f"\nWorst performing variables (highest p-values):")
    print(worst_variables.round(6))
    
    # also calculate wald chi-square for oot model for comparison
    calculations['wald_chi_square_oot'] = (calculations['estimate_oot'] / calculations['std_error_oot']) ** 2
    calculations['p_value_oot'] = 1 - stats.chi2.cdf(calculations['wald_chi_square_oot'], df=1)
    
    # return all results
    results = {
        'max_p_value': max_p_value,  # this is the single summary number
        'overall_color_code': overall_color,
        'overall_status': overall_status,
        'significant_count': significant_count,
        'total_parameters': total_params,
        'significant_percentage': significant_pct,
        'detailed_calculations': calculations,
        'worst_variables': worst_variables,
        'significance_summary': significance_summary,
        'model_name': model_name
    }
    
    return results

# example usage:
# significance_results = variable_significance(dev_model_results, oot_model_results, 'stage1_model')
