/*---------------------------------------------------------------*/
/* lgd_model2.sas â€“ censored-gamma / beta regression macro       */
/*---------------------------------------------------------------*/
%macro lgd_model2(
      train=,          /* training dataset                         */
      oot=,            /* out-of-time dataset                      */
      depvar=,         /* target lgd variable                      */
      indep=,          /* predictor list (space separated)         */
      models=CG BR,    /* which engines: CG, BR, or both           */
      outbase=lgd_out  /* stem for output tables                   */
   );

   %let eps = 1e-6;    /* small jitter for beta regression         */

   /* 1. stack the two samples and mark them                       */
   data _cmb;
      set &train(in=intrain) &oot(in=inoot);
      length sample $5;
      if intrain then sample = 'TRAIN';
      else if inoot then sample = 'OOT';
   run;

   /* loop over requested model list                               */
   %let nmodels = %sysfunc(countw(&models));
   %do i = 1 %to &nmodels;
      %let thismodel = %upcase(%scan(&models,&i));
      %put NOTE: running &thismodel.;

      /* 1a. prep jitter for beta regression                        */
      data _work_in;
         set _cmb;
         model = "&thismodel";
         %if &thismodel = BR %then %do;
            if &depvar = 0 then &depvar = &eps;
            else if &depvar = 1 then &depvar = 1-&eps;
         %end;
      run;

      /* 2. censored gamma                                          */
      %if &thismodel = CG %then %do;
         proc nlmixed data=_work_in tech=newrap qpoints=1 maxiter=500;
            /* params */
            parms beta0=0;
            %let j=1;
            %do %while (%scan(&indep,&j) ne );
               parms b&j.=0;
               %let j = %eval(&j+1);
            %end;
            parms logalpha=0;

            /* linear predictor */
            eta = beta0
            %let j=1;
            %do %while (%scan(&indep,&j) ne );
               + b&j.*%scan(&indep,&j)
               %let j = %eval(&j+1);
            %end;
            ;
            mu    = exp(eta);
            alpha = exp(logalpha);
            scale = mu / alpha;

            /* censored gamma ll */
            if      &depvar <  &eps then ll = log(gamcdf(&eps ,alpha,scale));
            else if &depvar > 1-&eps then ll = log(1 - gamcdf(1-&eps ,alpha,scale));
            else ll = log(gampdf(&depvar ,alpha,scale));

            model &depvar ~ general(ll);
            predict mu out=_pred_&thismodel(rename=(pred=pred_lgd));
         run;
      %end;

      /* 3. beta regression                                         */
      %else %if &thismodel = BR %then %do;
         proc nlmixed data=_work_in tech=newrap qpoints=1 maxiter=500;
            parms beta0=0;
            %let j=1;
            %do %while (%scan(&indep,&j) ne );
               parms b&j.=0;
               %let j = %eval(&j+1);
            %end;
            parms logphi=0;

            eta = beta0
            %let j=1;
            %do %while (%scan(&indep,&j) ne );
               + b&j.*%scan(&indep,&j)
               %let j = %eval(&j+1);
            %end;
            ;
            mu  = 1 / (1 + exp(-eta));
            phi = exp(logphi);

            ll  = lgamma(phi) - lgamma(mu*phi) - lgamma((1-mu)*phi)
                  + (mu*phi-1)*log(&depvar) + ((1-mu)*phi-1)*log(1-&depvar);

            model &depvar ~ general(ll);
            predict mu out=_pred_&thismodel(rename=(pred=pred_lgd));
         run;
      %end;

      /* 4. residuals and metrics                                   */
      data _pred_&thismodel;
         set _pred_&thismodel;
         keep sample model &depvar pred_lgd;
         residual     = &depvar - pred_lgd;
         abs_residual = abs(residual);
      run;

      proc sql noprint;
         create table _metrics_&thismodel as
         select
            "&thismodel"               as model,
            sample,
            mean(residual)             as mean_residual format=8.4,
            std(residual)              as std_residual  format=8.4,
            mean(abs_residual)         as mae           format=8.4,
            sqrt(mean(residual**2))    as rmse          format=8.4
         from _pred_&thismodel
         group by sample;
      quit;

      /* 5. stack results                                            */
      %if &i = 1 %then %do;
         data &outbase._pred;    set _pred_&thismodel;    run;
         data &outbase._metrics; set _metrics_&thismodel; run;
      %end;
      %else %do;
         proc append base=&outbase._pred    data=_pred_&thismodel   force; run;
         proc append base=&outbase._metrics data=_metrics_&thismodel force; run;
      %end;

   %end; /* model loop */

%mend lgd_model2;

/*---------------------------------------------------------------*/
/* example call                                                  */
/*---------------------------------------------------------------*/
%let all_vars = REFR_LTV SATO_INT LOAN_PURP_REFINANCE MOB_Term_Ratio
                Lag12_Unemp_SA PchgO_MA3_Home_Sales BAL_DEF_ADJ
                PchgO_Unemp_15_Pls_W Lag6_PChg12_HPI_P_On pre2007dummy;

%lgd_model2(
   train=train_data,
   oot=score_oot,
   depvar=model_lgd,
   indep=&all_vars,
   models=CG BR,
   outbase=lgd_run2
);
