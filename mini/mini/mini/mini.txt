def distribution_shift_analysis(baseline_data, current_data, var_dict, bins=10):
    """
    compare how aggregate distributions shift between baseline and current periods
    accounts for whether higher values are better or worse for each variable
    
    baseline_data: historical/development dataframe
    current_data: current/new applicant dataframe  
    var_dict: dictionary {variable_name: higher_is_better}
              e.g., {'credit_score': True, 'debt_to_income': False, 'income': True}
    bins: number of buckets to create (default 10 for deciles)
    """
    
    results = {}
    
    for var, higher_is_better in var_dict.items():
        print(f"\n=== Distribution Analysis for {var} ===")
        print(f"Direction: {'Higher is better' if higher_is_better else 'Lower is better'}")
        
        # create consistent bins based on baseline data
        baseline_bins = pd.qcut(baseline_data[var], q=bins, duplicates='drop')
        bin_edges = baseline_bins.cat.categories
        
        # apply same bins to both datasets
        baseline_binned = pd.cut(baseline_data[var], bins=[interval.left for interval in bin_edges] + [bin_edges[-1].right], include_lowest=True)
        current_binned = pd.cut(current_data[var], bins=[interval.left for interval in bin_edges] + [bin_edges[-1].right], include_lowest=True)
        
        # get distribution percentages
        baseline_dist = baseline_binned.value_counts(normalize=True).sort_index() * 100
        current_dist = current_binned.value_counts(normalize=True).sort_index() * 100
        
        # combine for comparison
        comparison = pd.DataFrame({
            'Baseline_Pct': baseline_dist,
            'Current_Pct': current_dist
        }).fillna(0)
        
        # calculate the shift
        comparison['Pct_Point_Change'] = comparison['Current_Pct'] - comparison['Baseline_Pct']
        comparison['Relative_Change'] = ((comparison['Current_Pct'] / comparison['Baseline_Pct']) - 1) * 100
        
        # add bin labels - adjust based on direction
        comparison['Bin_Rank'] = range(1, len(comparison) + 1)
        
        if higher_is_better:
            # for vars like credit score: higher bins = better quality
            comparison['Quality_Category'] = ['Worst' if x <= bins//4 else 'Bad' if x <= bins//2 else 'Good' if x <= 3*bins//4 else 'Best' 
                                            for x in comparison['Bin_Rank']]
            better_bins = comparison['Bin_Rank'] > bins//2  # top half bins
            worse_bins = comparison['Bin_Rank'] <= bins//2   # bottom half bins
        else:
            # for vars like debt_to_income: lower bins = better quality  
            comparison['Quality_Category'] = ['Best' if x <= bins//4 else 'Good' if x <= bins//2 else 'Bad' if x <= 3*bins//4 else 'Worst' 
                                            for x in comparison['Bin_Rank']]
            better_bins = comparison['Bin_Rank'] <= bins//2  # bottom half bins (lower values)
            worse_bins = comparison['Bin_Rank'] > bins//2    # top half bins (higher values)
        
        # calculate shifts to better vs worse quality buckets
        better_quality_shift = comparison[better_bins]['Pct_Point_Change'].sum()
        worse_quality_shift = comparison[worse_bins]['Pct_Point_Change'].sum()
        
        print(f"Net shift to BETTER quality bins: {better_quality_shift:+.1f} percentage points")
        print(f"Net shift to WORSE quality bins: {worse_quality_shift:+.1f} percentage points")
        
        if better_quality_shift > 2:
            print("✅ New borrowers are concentrating in BETTER quality buckets")
        elif worse_quality_shift > 2:
            print("⚠️  New borrowers are concentrating in WORSE quality buckets") 
        else:
            print("➡️  Distribution is relatively stable")
            
        print("\nDetailed breakdown:")
        display_cols = ['Bin_Rank', 'Quality_Category', 'Baseline_Pct', 'Current_Pct', 'Pct_Point_Change']
        print(comparison[display_cols].round(1))
        
        # store results with direction info
        comparison['Variable'] = var
        comparison['Higher_Is_Better'] = higher_is_better
        comparison['Better_Quality_Shift'] = better_quality_shift
        comparison['Worse_Quality_Shift'] = worse_quality_shift
        
        results[var] = comparison
    
    return results