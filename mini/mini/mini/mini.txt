/* lgd_censored.sas - comprehensive lgd modeling framework */
/* fits tobit, censored gamma, and beta regression models */

%macro lgd_censored(
      train= ,          
      oot=   ,          
      depvar= ,         
      indep=  ,         
      datevar=def_date, 
      models=TOBIT CG BR,     
      outbase=lgd_out   
   );

   %let eps = 1e-6;     

   /* count variables and clean up the list */
   %let var_count = %sysfunc(countw(&indep));
   %put Processing &var_count predictor variables;

   /* basic data stacking and prep */
   data _combined;
      length sample $5;
      set &train(in=a) &oot(in=b);
      
      if a then sample='TRAIN';
      else if b then sample='OOT';
      
      /* remove missing or out of bounds observations */
      if missing(&depvar) then delete;
      if &depvar < 0 or &depvar > 1 then delete;
      
      /* check for missing predictors */
      if nmiss(of &indep) > 0 then delete;
   run;

   /* quick data summary */
   proc sql noprint;
      select count(*) into :total_obs from _combined;
      select count(*) into :train_obs from _combined where sample='TRAIN';
      select count(*) into :oot_obs from _combined where sample='OOT';
   quit;

   %put Dataset summary - Total: &total_obs, Train: &train_obs, OOT: &oot_obs;

   /* check multicollinearity with vif values */
   proc reg data=_combined;
      model &depvar = &indep / vif;
      ods output ParameterEstimates=_vif_output;
   run;
   quit;

   /* show vif results */
   proc print data=_vif_output noobs;
      title "VIF Analysis - Multicollinearity Check";
      var Variable Estimate StdErr tValue Probt VarianceInflation;
      where Variable ne 'Intercept';
   run;

   /* flag high vif variables */
   data _high_vif;
      set _vif_output;
      where Variable ne 'Intercept' and VarianceInflation > 5;
      if _n_ = 1 then put "WARNING: Variables with VIF > 5 detected:";
      put Variable "VIF=" VarianceInflation;
   run;

   /* loop through each model */
   %let nmodels = %sysfunc(countw(&models));
   %do i = 1 %to &nmodels;
      %let model = %upcase(%scan(&models,&i));
      %put Running &model model...;

      /* prep data specific to each model */
      data _work;
         set _combined;
         model_type = "&model";
         
         %if &model = BR %then %do;
            /* beta regression needs open interval (0,1) */
            if &depvar = 0 then &depvar = &eps;
            else if &depvar = 1 then &depvar = 1-&eps;
         %end;
      run;

      /* run the appropriate model */
      %if &model = TOBIT %then %do;
         /* tobit model using proc qlim with proper syntax */
         proc qlim data=_work;
            model &depvar = &indep;
            endogenous &depvar ~ censored(lb=0 ub=1);
            output out=_pred_&model predicted marginal;
         run;
         
         /* fix output variable names from qlim */
         data _pred_&model;
            set _pred_&model;
            pred_lgd = p_&depvar;
            drop p_&depvar;
         run;
      %end;

      %else %if &model = CG %then %do;
         /* censored gamma model */
         proc nlmixed data=_work tech=newrap qpoints=1 maxiter=200;
            parms beta0=0;
            %do j=1 %to &var_count;
               parms b&j=0;
            %end;
            parms logalpha=0;

            /* build linear predictor step by step */
            eta = beta0;
            %do j=1 %to &var_count;
               %let thisvar = %scan(&indep,&j);
               eta = eta + b&j * &thisvar;
            %end;
            
            mu = exp(eta);
            alpha = exp(logalpha);
            scale = mu / alpha;

            /* censored gamma log-likelihood */
            if &depvar <= &eps then 
               ll = log(cdf('gamma', &eps, alpha, scale));
            else if &depvar >= 1-&eps then 
               ll = log(1 - cdf('gamma', 1-&eps, alpha, scale));
            else 
               ll = log(pdf('gamma', &depvar, alpha, scale));

            model &depvar ~ general(ll);
            predict mu out=_pred_&model(rename=(pred=pred_lgd));
         run;
      %end;

      %else %if &model = BR %then %do;
         /* beta regression model */
         proc nlmixed data=_work tech=newrap qpoints=1 maxiter=200;
            parms beta0=0;
            %do j=1 %to &var_count;
               parms b&j=0;
            %end;
            parms logphi=0;

            /* linear predictor */
            eta = beta0;
            %do j=1 %to &var_count;
               %let thisvar = %scan(&indep,&j);
               eta = eta + b&j * &thisvar;
            %end;
            
            mu = exp(eta) / (1 + exp(eta));
            phi = exp(logphi);

            /* beta distribution log-likelihood */
            ll = lgamma(phi) - lgamma(mu*phi) - lgamma((1-mu)*phi) +
                 (mu*phi-1)*log(&depvar) + ((1-mu)*phi-1)*log(1-&depvar);

            model &depvar ~ general(ll);
            predict mu out=_pred_&model(rename=(pred=pred_lgd));
         run;
      %end;

      /* clean up predictions and calculate residuals */
      data _pred_&model;
         set _pred_&model;
         
         /* keep the important stuff */
         keep sample model_type &datevar &depvar pred_lgd;
         
         residual = &depvar - pred_lgd;
         abs_residual = abs(residual);
         
         /* make sure predictions stay in bounds */
         if pred_lgd < 0 then pred_lgd = 0;
         if pred_lgd > 1 then pred_lgd = 1;
      run;

      /* calculate performance metrics */
      proc means data=_pred_&model noprint;
         class sample;
         var residual abs_residual &depvar pred_lgd;
         output out=_metrics_&model(where=(sample ne ''))
                mean(residual)=bias 
                std(residual)=rmse
                mean(abs_residual)=mae
                n=n_obs;
      run;

      /* add correlation separately since proc means doesn't do it */
      proc corr data=_pred_&model noprint 
                outp=_corr_&model(where=(_type_='CORR' and _name_="&depvar"));
         var &depvar pred_lgd;
         by sample;
      run;

      /* merge metrics with correlation */
      data _metrics_&model;
         merge _metrics_&model(in=a) 
               _corr_&model(keep=sample pred_lgd rename=(pred_lgd=correlation));
         by sample;
         if a;
         
         model = "&model";
         format bias rmse mae correlation 8.4;
         keep model sample n_obs bias rmse mae correlation;
      run;

      /* aggregate by date for plotting */
      proc means data=_pred_&model noprint;
         class &datevar;
         var &depvar pred_lgd;
         output out=_avg_&model(where=(&datevar ne .))
                mean=actual_lgd pred_lgd;
      run;

      data _avg_&model; 
         set _avg_&model; 
         model = "&model"; 
         drop _type_ _freq_;
      run;

      /* append to final datasets */
      %if &i = 1 %then %do;
         data &outbase._pred; set _pred_&model; run;
         data &outbase._metrics; set _metrics_&model; run; 
         data &outbase._compare; set _avg_&model; run;
      %end;
      %else %do;
         proc append base=&outbase._pred data=_pred_&model force; run;
         proc append base=&outbase._metrics data=_metrics_&model force; run;
         proc append base=&outbase._compare data=_avg_&model force; run;
      %end;

      /* make a simple plot */
      proc sgplot data=_avg_&model;
         series x=&datevar y=actual_lgd / lineattrs=(thickness=2) 
                legendlabel="Actual";
         series x=&datevar y=pred_lgd / lineattrs=(thickness=2 pattern=dash) 
                legendlabel="Predicted"; 
         xaxis label="Date";
         yaxis label="LGD Level";
         title "&model Model - Backtesting Chart";
         keylegend / location=inside position=topright;
      run;

   %end;

   /* show results */
   proc print data=&outbase._metrics noobs;
      title "Model Performance Comparison";
      var model sample n_obs bias rmse mae correlation;
   run;

   /* clean up workspace */
   proc datasets lib=work nolist;
      delete _combined _work _pred_: _metrics_: _avg_: _corr_:;
   quit;

%mend lgd_censored;

/* usage example */
%let all_vars = REFR_LTV SATO_INT LOAN_PURP_REFINANCE MOB_Term_Ratio
                Lag12_Unemp_SA PchgO_MA3_Home_Sales BAL_DEF_ADJ
                PchgO_Unemp_15_Pls_Wk Lag6_PChg12_HPI_P_Only pre2007dummy;

%lgd_censored(
   train=lgd_training_data,
   oot=lgd_oot_data, 
   depvar=lgd_36M,
   indep=&all_vars,
   datevar=def_date,
   models=TOBIT CG BR,
   outbase=lgd_results
);
