def twostage_lgd(stage1_data, stage2_data, score_hist, score_oot, 
                id_var='loan_number', date_var='def_date', lgd_var='lgd_36m',
                stage1_vars=None, stage2_vars=None, outprefix='tg_', 
                reference_date=None, create_plots=True):
    """
    Python implementation of SAS two-stage LGD modeling macro
    Uses statsmodels to match SAS exactly
    """
    results = {}
    
    # Stage 1: Probability of Loss Model
    print("=" * 60)
    print("STAGE 1 MODEL - PROBABILITY OF LOSS")
    print("=" * 60)
    
    stage1_y = stage1_data['lgd_stage1']
    stage1_X = stage1_data[stage1_vars]
    stage1_X_const = sm.add_constant(stage1_X)
    
    stage1_model = sm.Logit(stage1_y, stage1_X_const).fit(disp=0)
    print(stage1_model.summary())
    results['stage1_model'] = stage1_model
    
    # Stage 2: E(LGD | Loss) Model  
    print("\n" + "=" * 60)
    print("STAGE 2 MODEL - E(LGD | LOSS)")
    print("=" * 60)
    
    stage2_y = stage2_data['algd_adj']
    stage2_X = stage2_data[stage2_vars]
    stage2_X_const = sm.add_constant(stage2_X)
    sample_weights = stage2_data['wt']
    
    stage2_model = sm.Logit(stage2_y, stage2_X_const, freq_weights=sample_weights).fit(disp=0)
    print(stage2_model.summary())
    results['stage2_model'] = stage2_model
    
    # Score Historical Data
    print("\n" + "=" * 60)
    print("SCORING AND PERFORMANCE METRICS")
    print("=" * 60)
    
    # Sort scoring data by id_var to ensure proper alignment
    score_hist_sorted = score_hist.sort_values(by=id_var).reset_index(drop=True)
    
    hist_stage1_X_const = sm.add_constant(score_hist_sorted[stage1_vars])
    hist_stage1_probs = stage1_model.predict(hist_stage1_X_const)
    
    hist_stage2_X_const = sm.add_constant(score_hist_sorted[stage2_vars])
    hist_stage2_probs = stage2_model.predict(hist_stage2_X_const)
    
    scored_hist = score_hist_sorted.copy()
    scored_hist['p_loss'] = hist_stage1_probs
    scored_hist['p_lgd'] = hist_stage2_probs
    scored_hist['pred_lgd'] = hist_stage1_probs * hist_stage2_probs
    
    if 'lgd_stage1' not in scored_hist.columns:
        scored_hist['lgd_stage1'] = (scored_hist[lgd_var] > 0).astype(int)
    if 'algd_adj' not in scored_hist.columns:
        scored_hist['algd_adj'] = (scored_hist[lgd_var] > 0).astype(int)
    
    # Score OOT Data
    # Sort scoring data by id_var to ensure proper alignment
    score_oot_sorted = score_oot.sort_values(by=id_var).reset_index(drop=True)
    
    oot_stage1_X_const = sm.add_constant(score_oot_sorted[stage1_vars])
    oot_stage1_probs = stage1_model.predict(oot_stage1_X_const)
    
    oot_stage2_X_const = sm.add_constant(score_oot_sorted[stage2_vars])
    oot_stage2_probs = stage2_model.predict(oot_stage2_X_const)
    
    scored_oot = score_oot_sorted.copy()
    scored_oot['p_loss'] = oot_stage1_probs
    scored_oot['p_lgd'] = oot_stage2_probs
    scored_oot['pred_lgd'] = oot_stage1_probs * oot_stage2_probs
    
    if 'lgd_stage1' not in scored_oot.columns:
        scored_oot['lgd_stage1'] = (scored_oot[lgd_var] > 0).astype(int)
    if 'algd_adj' not in scored_oot.columns:
        scored_oot['algd_adj'] = (scored_oot[lgd_var] > 0).astype(int)
    
    # Performance Metrics
    metrics = {}
    
    stage1_hist_metrics = performance_metrics(scored_hist, 'lgd_stage1', 'p_loss', date_var)
    metrics['stage1_hist'] = stage1_hist_metrics
    print(f"Stage-1 HIST - MAE: {stage1_hist_metrics['mae']:.6f}, RMSE: {stage1_hist_metrics['rmse']:.6f}")
    
    stage2_hist_metrics = performance_metrics(scored_hist, lgd_var, 'p_lgd', date_var)
    metrics['stage2_hist'] = stage2_hist_metrics
    print(f"Stage-2 HIST - MAE: {stage2_hist_metrics['mae']:.6f}, RMSE: {stage2_hist_metrics['rmse']:.6f}")
    
    combined_hist_metrics = performance_metrics(scored_hist, lgd_var, 'pred_lgd', date_var)
    metrics['combined_hist'] = combined_hist_metrics
    print(f"Combined HIST - MAE: {combined_hist_metrics['mae']:.6f}, RMSE: {combined_hist_metrics['rmse']:.6f}")
    
    stage1_oot_metrics = performance_metrics(scored_oot, 'lgd_stage1', 'p_loss', date_var)
    metrics['stage1_oot'] = stage1_oot_metrics
    print(f"Stage-1 OOT - MAE: {stage1_oot_metrics['mae']:.6f}, RMSE: {stage1_oot_metrics['rmse']:.6f}")
    
    stage2_oot_metrics = performance_metrics(scored_oot, lgd_var, 'p_lgd', date_var)
    metrics['stage2_oot'] = stage2_oot_metrics
    print(f"Stage-2 OOT - MAE: {stage2_oot_metrics['mae']:.6f}, RMSE: {stage2_oot_metrics['rmse']:.6f}")
    
    combined_oot_metrics = performance_metrics(scored_oot, lgd_var, 'pred_lgd', date_var)
    metrics['combined_oot'] = combined_oot_metrics
    print(f"Combined OOT - MAE: {combined_oot_metrics['mae']:.6f}, RMSE: {combined_oot_metrics['rmse']:.6f}")
    
    results['metrics'] = metrics
    
    # Create Performance Plots
    if create_plots:
        print("\nCreating Performance Plots...")
        
        create_performance_plot(
            stage1_hist_metrics['aggregated_data'],
            stage1_oot_metrics['aggregated_data'], 
            'lgd_stage1', 'p_loss', date_var,
            'Stage-1', reference_date
        )
        
        create_performance_plot(
            stage2_hist_metrics['aggregated_data'],
            stage2_oot_metrics['aggregated_data'],
            lgd_var, 'p_lgd', date_var, 
            'Stage-2', reference_date
        )
        
        create_performance_plot(
            combined_hist_metrics['aggregated_data'],
            combined_oot_metrics['aggregated_data'],
            lgd_var, 'pred_lgd', date_var,
            'Combined', reference_date
        )
    
    print("\nTwo-Stage LGD Modeling Complete!")
    return results
