def lgd_datastaging(orig_data, stage1_vars, stage2_vars, lgd_var, 
                   id_var='LOAN_NUMBER', date_var='def_date'):
    """
    Python implementation of SAS lgd_datastaging macro
    Creates properly staged data for two-stage LGD modeling
    
    Parameters:
    - orig_data: Original DataFrame
    - stage1_vars: List of stage 1 variables
    - stage2_vars: List of stage 2 variables  
    - lgd_var: Name of LGD variable
    - id_var: ID variable name
    - date_var: Date variable name
    
    Returns:
    - Dictionary containing stage1, stage2, and combined datasets
    """
    
    results = {}
    
    # Stage 1 dataset
    stage1_keep_vars = stage1_vars + [lgd_var, id_var, date_var]
    lgd_stage1 = orig_data[stage1_keep_vars].copy()
    lgd_stage1['wt'] = 1
    results['lgd_stage1'] = lgd_stage1
    
    # Stage 2 dataset  
    stage2_keep_vars = stage2_vars + [lgd_var, id_var, date_var]
    lgd_stage2 = orig_data[stage2_keep_vars].copy()
    lgd_stage2['wt'] = 1
    results['lgd_stage2'] = lgd_stage2
    
    # Combined dataset with all variables
    all_vars = list(set(stage1_vars + stage2_vars + [lgd_var, id_var, date_var]))
    lgd_stage_all = orig_data[all_vars].copy()
    lgd_stage_all['wt'] = 1
    results['lgd_stage_all'] = lgd_stage_all
    
    # Adding staging flags to stage1 dataset
    lgd_stage1_wf = lgd_stage1.copy()
    
    # Create LGD category flags
    lgd_stage1_wf['lgd_0'] = (lgd_stage1_wf[lgd_var] == 0).astype(int)
    lgd_stage1_wf['lgd_1'] = (lgd_stage1_wf[lgd_var] == 1).astype(int)
    lgd_stage1_wf['lgd_0_1'] = ((lgd_stage1_wf[lgd_var] > 0) & 
                                (lgd_stage1_wf[lgd_var] < 1)).astype(int)
    lgd_stage1_wf['lgd_0_1_inc'] = ((lgd_stage1_wf[lgd_var] > 0) & 
                                    (lgd_stage1_wf[lgd_var] <= 1)).astype(int)
    
    results['lgd_stage1_wf'] = lgd_stage1_wf
    
    # Adding staging flags to stage2 dataset
    lgd_stage2_wf = lgd_stage2.copy()
    
    # Create LGD category flags (same as stage1)
    lgd_stage2_wf['lgd_0'] = (lgd_stage2_wf[lgd_var] == 0).astype(int)
    lgd_stage2_wf['lgd_1'] = (lgd_stage2_wf[lgd_var] == 1).astype(int)
    lgd_stage2_wf['lgd_0_1'] = ((lgd_stage2_wf[lgd_var] > 0) & 
                                (lgd_stage2_wf[lgd_var] < 1)).astype(int)
    lgd_stage2_wf['lgd_0_1_inc'] = ((lgd_stage2_wf[lgd_var] > 0) & 
                                    (lgd_stage2_wf[lgd_var] <= 1)).astype(int)
    
    results['lgd_stage2_wf'] = lgd_stage2_wf
    
    # Adding staging flags to combined dataset
    lgd_stage_all_wf = lgd_stage_all.copy()
    
    # Create LGD category flags (same as above)
    lgd_stage_all_wf['lgd_0'] = (lgd_stage_all_wf[lgd_var] == 0).astype(int)
    lgd_stage_all_wf['lgd_1'] = (lgd_stage_all_wf[lgd_var] == 1).astype(int)
    lgd_stage_all_wf['lgd_0_1'] = ((lgd_stage_all_wf[lgd_var] > 0) & 
                                   (lgd_stage_all_wf[lgd_var] < 1)).astype(int)
    lgd_stage_all_wf['lgd_0_1_inc'] = ((lgd_stage_all_wf[lgd_var] > 0) & 
                                       (lgd_stage_all_wf[lgd_var] <= 1)).astype(int)
    
    results['lgd_stage_all_wf'] = lgd_stage_all_wf
    
    # Stage 1 y creation
    lgd_stage1_wf_wadj = lgd_stage1_wf.copy()
    
    # Create LGD_Stage1: 1 if lgd_var = 0, 2 otherwise
    lgd_stage1_wf_wadj['LGD_Stage1'] = np.where(
        lgd_stage1_wf_wadj[lgd_var] == 0, 1, 2
    )
    
    results['lgd_stage1_wf_wadj'] = lgd_stage1_wf_wadj
    
    # Stage 2 algd_adj creation
    lgd_stage2_wf_wadj = lgd_stage2_wf.copy()
    
    # Filter to only include cases where 0 < lgd_var <= 1
    mask = (lgd_stage2_wf_wadj[lgd_var] > 0) & (lgd_stage2_wf_wadj[lgd_var] <= 1)
    lgd_stage2_wf_wadj = lgd_stage2_wf_wadj[mask].copy()
    
    # Create two rows for each original row (condition a and b)
    all_rows = []
    
    for idx, row in lgd_stage2_wf_wadj.iterrows():
        lgd_val = row[lgd_var]
        
        # Condition "a": algd_adj=1, wt=lgd_var
        row_a = row.copy()
        row_a['algd_adj'] = 1
        row_a['wt'] = lgd_val
        all_rows.append(row_a)
        
        # Condition "b": algd_adj=0, wt=1-lgd_var  
        row_b = row.copy()
        row_b['algd_adj'] = 0
        row_b['wt'] = 1 - lgd_val
        all_rows.append(row_b)
    
    # Create new DataFrame with doubled rows
    lgd_stage2_wf_wadj = pd.DataFrame(all_rows).reset_index(drop=True)
    
    results['lgd_stage2_wf_wadj'] = lgd_stage2_wf_wadj
    
    return results

def performance_metrics(data, actual_var, pred_var, date_var=None):
    """
    Calculate performance metrics (MAE, RMSE) and return aggregated data for plotting
    
    Parameters:
    - data: DataFrame with actual and predicted values
    - actual_var: name of actual variable column
    - pred_var: name of predicted variable column  
    - date_var: name of date variable for aggregation (optional)
    
    Returns:
    - dict with MAE, RMSE, and aggregated data
    """
    # Calculate overall metrics
    mae = mean_absolute_error(data[actual_var], data[pred_var])
    rmse = np.sqrt(mean_squared_error(data[actual_var], data[pred_var]))
    
    results = {
        'mae': mae,
        'rmse': rmse,
        'aggregated_data': None
    }
    
    # If date variable provided, aggregate by date
    if date_var and date_var in data.columns:
        # Group by date and calculate means
        agg_data = data.groupby(date_var).agg({
            actual_var: 'mean',
            pred_var: 'mean'
        }).reset_index()
        
        # Rename columns to match SAS output format
        agg_data.columns = [date_var, actual_var, pred_var]
        agg_data['Type'] = 'HIST'  # Default type
        
        results['aggregated_data'] = agg_data
    
    return results
